# graphqlOperation
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getSong(songId: ID!, userId: ID!): Song @aws_iam
  listSongs(userId: ID!, limit: Int, filter: String, nextToken: String): [Song]! @aws_iam
  listSharedSongs(userId: ID!, optimize: Boolean, limit: Int, filter: String, nextToken: String): [Song]! @aws_iam
  
  getUserById(userId: ID!): User @aws_iam
  getUserByEmail(email: AWSEmail): User @aws_iam
  listUsers(limit: Int, filter: String, nextToken: String): [User]! @aws_iam
  
  getBand(bandId: ID!): Band @aws_iam
  listBands(limit: Int, filter: String, nextToken: String): [Band]! @aws_iam

  getSet(setListId: ID!, userId: ID!): SetList @aws_iam
  listSets(userId: ID!, limit: Int, filter: String, nextToken: String): [SetList]! @aws_iam

  getJamSession(jamSessionId: ID!, userId: ID!): JamSession @aws_iam
}

type Mutation {
  createUser(
    username: String!, email: String!, provider: provider!,
    firstName: String, lastName: String, imageUrl: String
  ): User @aws_iam

  createSong(
    title: String!
    userId: ID!
    artist: String
    album: String
    albumCover: String

    chordSheet: String!
    chordSheetKey: String!
  ): Song @aws_iam

  updateSong(
    songId: ID!
    ownerId: ID!
    title: String
    artist: String
    album: String
    albumCover: String
    beat: _Beat
    approved: Boolean

    chordSheet: String
    chordSheetKey: String
    originalPlatorm: chordSheetPlatform 
    originalLink: String
  ): Song @aws_iam

  shareSong(songId: ID!, userId: ID!, shareWithEmail: AWSEmail!, access: access!): Song @aws_iam
  removeAccess(songId: ID!, userId: ID!, removeUserEmail: AWSEmail!): Song @aws_iam

  addRecordingToSong(songId: ID!, recordingId: ID!): Song @aws_iam
  removeRecordingFromSong(songId: ID!, recordingId: ID!): Song @aws_iam

  createBand(ownerId: ID!, name: String): Band @aws_iam
  addBandMembers(bandId: ID!, userIds: [ID]!): Band @aws_iam
  removeBandMembers(bandId: ID!, userIds: [ID]!): Band @aws_iam
  addSongsToBand(bandId: ID!, songIds: [ID]!): Band @aws_iam
  removeSongsFromBand(bandId: ID!, songIds: [ID]!): Band @aws_iam

  createSet(userId: ID!, description: String!, songs: [JamSongInput]!): SetList @aws_iam
  updateSet(
    setListId: ID!
    description: String
    songs: [JamSongInput]
    userId: ID
  ): SetList @aws_iam

  addEditorToSet(setListId: ID!, userId: ID!): SetList @aws_iam
  removeEditorFromSet(setListId: ID!, userId: ID!): SetList @aws_iam
  addSongToSet(setListId: ID!, songId: ID!, key: String): SetList @aws_iam
  removeSongFromSet(setListId: ID!, jamSongId: [ID]!): SetList @aws_iam

  createJamSession(setListId: ID!, userId: ID!): JamSession @aws_iam
  endJamSession(jamSessionId: ID!): JamSession @aws_iam
  modifyJamSongs(jamSessionId: ID!, jamSongs: [JamSongInput]!): JamSession

  nextPage(jamSessionId: ID!, page: Int!): NextPage
  nextSong(jamSessionId: ID!, song: Int!, page: Int): NextSong
  setSongKey(jamSessionId: ID!, key: String!, song: Int): NextKey
}

type Subscription {
  onNextPage(jamSessionId: ID!): NextPage @aws_subscribe(mutations: ["nextPage"])
  onNextSong(jamSessionId: ID!): NextSong @aws_subscribe(mutations: ["nextSong"])
  onSongKey(jamSessionId: ID!): NextKey @aws_subscribe(mutations: ["setSongKey"])
}

enum recordingStatus { TOLABEL INAUDIT COMPLETE }
enum gender { MALE, FEMALE }
enum chordSheetPlatform { UG, WORSHIPTOGETHER, OTHER }
enum provider { google, facebook }
enum access { admin, edit, view }

type NextPage {
  jamSessionId: ID!
  page: Int
}

type NextSong {
  jamSessionId: ID!
  song: Int
  page: Int
}

type NextKey {
  jamSessionId: ID!
  song: Int
  key: String
}

type Band {
  bandId: ID!
  songs: [Song]!
  members: [User]!
  owner: User!
}

type SetList {
  setListId: ID!
  description: String!
  songs: [JamSong]!
  editors: [User]!
  creator: User!
  band: Band
}

type JamSession {
  jamSessionId: ID!
  setList: SetList!
  admin: User!
  members: [User]!

  currentSong: Int
  currentPage: Int
  pageSettings: PageSettings!

  startDate: AWSTimestamp
  endDate: AWSTimestamp
}

# Not a DB Item!
type JamSong {
  key: String!
  song: Song!
}

input JamSongInput {
  songId: ID!
  key: String!
}
  
input _Beat {
  count: Int!
  note: Int!
}

type Beat {
  count: Int!
  note: Int!
}

type PageSettings {
  pageMax: Int
  pageMin: Int
}

type Song {
  songId: ID!
  title: String!
  artist: String
  album: String
  albumCover: String
  beat: Beat
  isApproved: Boolean!  
  version: Int!

  creator: User!
  editors: [User]!
  viewers: [User]!

  recordings: [Recording]!

  chordSheet: String
  chordSheetKey: String
  originPlatorm: chordSheetPlatform 
  originLink: String
}

type User {
  userId: ID!
  username: String!
  email: AWSEmail!
  providers: [provider]!

  firstName: String
  lastName: String
  imageUrl: String
  recieveUpdatesFromOslyn: Boolean
  isActivated: Boolean
  createDate: AWSTimestamp

  role: role!

  friends: [User]!
  labelledRecording: [Recording]!
  songsCreated: [Song]!
  editHistory: [RecordingHistory]! 
  likedSongs: [JamSong]!
}

enum role { USER, ADMIN }

type RecordingHistory {
  recordingHistoryId: ID!
  recording: Recording!
  labeller: User! 
  date: AWSDateTime!
  actionColumn: String!
  previousAction: String!
  newAction: String!
  comment: String
}

type Recording {
  recordingId: ID!
  songTitle: String
  formId: String
  song: Song
  key: String

  tabLink: String
  rawTabs: String
  
  prelabelTool: String
  prelabelToolVersion: String
  
  labelTool: String
  labelToolVersion: String
  
  labeller: User
  isLabelerRejected: Boolean!
  labelerRejectionReason: String

  singerName: String
  singerEmail: AWSEmail
  gender: gender

  status: recordingStatus!
  editHistory: [RecordingHistory]!
  comment: String

  createDate: String # This date comes from Google Forms
  updateDate: AWSDateTime
  lastOULGenerateDate: AWSDateTime
}